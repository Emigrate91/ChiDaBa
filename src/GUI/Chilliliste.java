package GUI;

import DB.DB;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 * this class assembles the childForm Chilliliste of the parrentForm Einloggen
 * @author Team ChiDaBa
 */
public class Chilliliste extends javax.swing.JDialog {

    private Einloggen parentForm;
    PflanzenDaten ZusatzFrame;
    Ereignisse EreignisFrame;
     /**
     * Creates new form Chilliliste
     */
    public Chilliliste(Einloggen parent) throws Exception {
        this.parentForm=parent;
        setIconImage(getToolkit().getImage("src/ICONS/Icon.png"));
        initComponents();
        writeTblToTblChilli();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TblChilli = new javax.swing.JTable();
        PanListe = new javax.swing.JPanel();
        TxtSuche = new javax.swing.JTextField();
        BtnSuche = new javax.swing.JButton();
        BtnInfo = new javax.swing.JButton();
        BtnNew = new javax.swing.JButton();
        BtnLogout = new javax.swing.JButton();
        BtnErignisse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Chilliliste");
        setMinimumSize(null);
        setName("Chilliliste"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TblChilli.setAutoCreateRowSorter(true);
        TblChilli.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Sorte", "Art", "Herkunft", "Aussaat"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TblChilli);

        PanListe.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        TxtSuche.setText("Suche...");

        BtnSuche.setText("Suche");
        BtnSuche.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnMouseExitedSetColor(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnMouseEnteredSetColor(evt);
            }
        });

        BtnInfo.setText("Zusatzinformation");
        BtnInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnMouseExitedSetColor(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnMouseEnteredSetColor(evt);
            }
        });
        BtnInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnInfoActionPerformed(evt);
            }
        });

        BtnNew.setText("Neuer Eintrag anlegen");
        BtnNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnMouseExitedSetColor(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnMouseEnteredSetColor(evt);
            }
        });
        BtnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnNewActionPerformed(evt);
            }
        });

        BtnLogout.setText("Ausloggen");
        BtnLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnMouseExitedSetColor(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnMouseEnteredSetColor(evt);
            }
        });
        BtnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanListeLayout = new javax.swing.GroupLayout(PanListe);
        PanListe.setLayout(PanListeLayout);
        PanListeLayout.setHorizontalGroup(
            PanListeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanListeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TxtSuche, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(BtnSuche)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanListeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BtnNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanListeLayout.setVerticalGroup(
            PanListeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanListeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanListeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PanListeLayout.createSequentialGroup()
                        .addGroup(PanListeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnInfo)
                            .addComponent(TxtSuche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnNew))
                    .addComponent(BtnSuche, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        BtnErignisse.setText("Ereignisse");
        BtnErignisse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BtnMouseExitedSetColor(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BtnMouseEnteredSetColor(evt);
            }
        });
        BtnErignisse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnErignisseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanListe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnErignisse, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanListe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnErignisse)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * loads the informations into the table from the Database
 * @throws Exception DB-Exception if there is an error wit the database
 */
    public final void writeTblToTblChilli() throws Exception{
    DB loadTable = new DB();
    DefaultTableModel model = (DefaultTableModel) TblChilli.getModel();
   
    Object[] columnIdentifiers = new Object[model.getColumnCount()];
    
    for(int i=0;i<model.getColumnCount();i++)
        {columnIdentifiers[i]=model.getColumnName(i);}
    
    model.setDataVector(loadTable.getTblPflanzenFromDB(), columnIdentifiers);
    }
    
    /**
     * if the User wants to close a form, a warning opens to ask him if thats whats he relly wants
     * @return the answer of the user wether he wants to close the current form or not
     */
    public boolean AskClosing()
    {
    int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Alle nicht gespeicherten Änderungen gehen verloren", "Warnung",JOptionPane.OK_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
    if(showConfirmDialog==0) {return true;}
    else {return false;}
    }
    
    /**
     * this method closes the Frame clean
     */
    private void CleanClose()
    {
    this.dispose();
    this.parentForm.ChilliFrame=null; // because dispose
    this.parentForm.Callback();
    }
    /**
     * query if the User wants to close all open minimized frames alongside with this Frame
     * @param framename the name of the still open Frame
     * @return the answer wether the user wants to close the frames or not
     */
    public boolean showConfirmDialog(String framename)
    {
    int showConfirmDialogZusatz = JOptionPane.showConfirmDialog(this, "Das Fenster \""+framename+"\" ist noch geöffnet\nAlle nicht gespeicherten Änderungen gehen verloren", "Warnung",JOptionPane.OK_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);
    if(showConfirmDialogZusatz==0){return true;} 
    else {return false;}
        
    }
    /**
     * SetEnabled is State and because of that either true or false 
     * @param state enables or disables every input component
     */
    public void SetEditable(boolean state)
    {
    this.BtnErignisse.setEnabled(state);
    this.BtnInfo.setEnabled(state);
    this.BtnLogout.setEnabled(state);
    this.BtnNew.setEnabled(state);
    this.BtnSuche.setEnabled(state);
    this.TblChilli.setEnabled(state);
    this.TxtSuche.setEnabled(state);
    }
    /**
     * when the button Logout is clicked the method CleanClose shall be called
     */
    private void BtnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLogoutActionPerformed
    this.CleanClose();
    }//GEN-LAST:event_BtnLogoutActionPerformed
/**
 * ckecks wich row is selectet and opens the next frame 
 */
    private void BtnInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnInfoActionPerformed
    if(this.TblChilli.getSelectedRow()!=-1) {    
        
        DB con = new DB();
        Object sorte=this.TblChilli.getModel().getValueAt(this.TblChilli.getSelectedRow(), 0);
        Object art=this.TblChilli.getModel().getValueAt(this.TblChilli.getSelectedRow(), 1);
        try {
            Object PlantID =con.getPlantID(sorte, art);
            this.ZusatzFrame = new PflanzenDaten(this, PlantID);
            this.SetEditable(false);
            this.ZusatzFrame.setVisible(true); 
            this.ZusatzFrame.loaded=true;
            } 
        
        catch (Exception ex) {System.err.println(ex.getMessage());}
        }
    }//GEN-LAST:event_BtnInfoActionPerformed
/**
 * opens the Frame Neu and disables the current Frame
 * @exception opens an error message if the new frame cannot be openend
 */
    private void BtnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnNewActionPerformed
        try {
            this.ZusatzFrame = new PflanzenDaten(this);
            this.SetEditable(false);
            this.ZusatzFrame.setVisible(true); 
            this.ZusatzFrame.loaded=true;
        } 
        
        catch (Exception ex) {System.err.println(ex.getMessage());}

    }//GEN-LAST:event_BtnNewActionPerformed
/**
 * opens the Frame Ereignisse for an selected row and loads the related information
 * @exception opens an error mesage if the informations cannot be pulled from the Database
 */
    private void BtnErignisseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnErignisseActionPerformed
    if(this.TblChilli.getSelectedRow()!=-1) {
        DB con = new DB();
        Object sorte=this.TblChilli.getModel().getValueAt(this.TblChilli.getSelectedRow(), 0);
        Object art=this.TblChilli.getModel().getValueAt(this.TblChilli.getSelectedRow(), 1);

        try {
            Object PlantID =con.getPlantID(sorte, art);
            Object EreignissID = con.getEreigniss_fk(PlantID);
            this.EreignisFrame = new Ereignisse(this, EreignissID);
            this.SetEditable(false);
            this.EreignisFrame.setVisible(true);
            } 
        catch (Exception ex) { System.err.println(ex.getMessage());}
        }
    }//GEN-LAST:event_BtnErignisseActionPerformed
/**
 * checks wich windows are open and closes them if Chililiste is closed
 */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    if(this.ZusatzFrame!=null) // if Zusatzrame is open
        {
        if(this.showConfirmDialog("Zusatzinformation"))
           {this.ZusatzFrame.CleanClose();} 
        else {return;}
        }
        
    
    if(this.EreignisFrame!=null) // if ErignisFrame is open
        {
         if(this.EreignisFrame.DüngerForm!=null)
            {
            if(this.showConfirmDialog("Neuer Dünger"))
                {
                this.EreignisFrame.DüngerForm.CleanClose();    
                this.EreignisFrame.CleanClose();
                }
            else {return;}
            }          
        else
            {
            if(this.showConfirmDialog("Ereignisse"))
                {this.EreignisFrame.CleanClose();}
            else {return;}            
            }
        } 
    
    // Close this Window
    this.CleanClose();
    }//GEN-LAST:event_formWindowClosing

    private void BtnMouseExitedSetColor(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnMouseExitedSetColor
    evt.getComponent().setBackground(null);
    }//GEN-LAST:event_BtnMouseExitedSetColor

    private void BtnMouseEnteredSetColor(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnMouseEnteredSetColor
    evt.getComponent().setBackground(new Color(177,47,46));
    }//GEN-LAST:event_BtnMouseEnteredSetColor

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnErignisse;
    private javax.swing.JButton BtnInfo;
    private javax.swing.JButton BtnLogout;
    private javax.swing.JButton BtnNew;
    private javax.swing.JButton BtnSuche;
    private javax.swing.JPanel PanListe;
    private javax.swing.JTable TblChilli;
    private javax.swing.JTextField TxtSuche;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
